# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd

# Carregar o dataset
df = pd.read_csv('labelled_dysx.csv')

# Ver as primeiras linhas do dataset
df.head()

# Estatísticas descritivas das variáveis selecionadas
df[['Language_vocab', 'Memory', 'Speed', 'Visual_discrimination', 'Audio_Discrimination', 'Survey_Score', 'Label']].describe()

# Verificar as primeiras linhas do dataset
print(data.head())

# Resumo estatístico
print(data.describe())

# Verificar tipos de dados
print(data.info())

import matplotlib.pyplot as plt
import seaborn as sns

# Histograma para Memória
sns.histplot(df['Memory'], bins=10)
plt.title('Distribuição da Memória')
plt.show()

# Histograma para Velocidade
sns.histplot(df['Speed'], bins=10)
plt.title('Distribuição da Velocidade')
plt.show()

# Histograma para Vocabulário
sns.histplot(df['Language_vocab'], bins=10)
plt.title('Distribuição do Vocabulário')
plt.show()

# Histograma para Diferenciação Visual
sns.histplot(df['Visual_discrimination'], bins=10)
plt.title('Distribuição da Diferenciação Visual')
plt.show()

# Histograma para Diferenciação Auditiva
sns.histplot(df['Audio_Discrimination'], bins=10)
plt.title('Distribuição da Diferenciação por Áudio')
plt.show()

# Boxplot para Memória
sns.boxplot(x=df['Memory'])
plt.title('Boxplot da Memória')
plt.show()

# Boxplot para Velocidade
sns.boxplot(x=df['Speed'])
plt.title('Boxplot da Velocidade')
plt.show()

# Boxplot para Vocabulário
sns.boxplot(x=df['Language_vocab'])
plt.title('Boxplot da Memória')
plt.show()

# Boxplot para Diferenciação Visual
sns.boxplot(x=df['Visual_discrimination'])
plt.title('Boxplot da Diferenciação Visual')
plt.show()

# Boxplot para Diferenciação Auditiva
sns.boxplot(x=df['Audio_Discrimination'])
plt.title('Boxplot da Diferenciação Auditiva')
plt.show()
import seaborn as sns
import matplotlib.pyplot as plt

# Dispersão entre Memória e Vocabulário
sns.scatterplot(x=df['Memory'], y=df['Language_vocab'])
plt.title('Memória vs Vocabulário')
plt.show()

# Dispersão entre Velocidade e Diferenciação Visual
sns.scatterplot(x=df['Speed'], y=df['Visual_discrimination'])
plt.title('Velocidade vs Diferenciação Visual')
plt.show()

# Dispersão entre Vocabulário e Diferenciação Auditiva
sns.scatterplot(x=df['Language_vocab'], y=df['Audio_Discrimination'])
plt.title('Vocabulário e Diferenciação Auditiva')
plt.show()

# Dispersão entre Memória e Velocidade
sns.scatterplot(x=df['Memory'], y=df['Speed'])
plt.title('Memória e Velocidade')
plt.show()

# Dispersão entre Memória e Pontuação da Pesquisa
sns.scatterplot(x=df['Memory'], y=df['Survey_Score'])
plt.title('Memória e Pontuação da Pesquisa')
plt.show()

# Matriz de correlação
correlation_matrix = df[['Label', 'Memory', 'Speed', 'Language_vocab', 'Visual_discrimination', 'Audio_Discrimination']].corr()
sns.heatmap(correlation_matrix, annot=True)
plt.title('Matriz de Correlação')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Definir variáveis dependente e independentes
X = df[['Memory', 'Speed', 'Language_vocab', 'Visual_discrimination', 'Audio_Discrimination']]
y = df['Label']

# Dividir o dataset em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar o modelo de regressão logística
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Fazer previsões
y_pred = model.predict(X_test)

# Avaliar acurácia
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia do modelo: {accuracy}')

# Exibir os coeficientes do modelo
coefficients = pd.DataFrame({'Variável': X.columns, 'Coeficiente': model.coef_[0]})
print(coefficients)

y_train_binary = (y_train > 0).astype(int)  # 1 se for dislexia (1 ou 2), 0 se não (0)

print(X_train.isnull().sum())

import seaborn as sns
import matplotlib.pyplot as plt

# Criar matriz de correlação
correlation_matrix = X_train.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Matriz de Correlação das Variáveis Independentes")
plt.show()

print(result.summary())

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Separar os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ajustar um modelo de árvore de decisão
tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)

# Prever no conjunto de teste
y_pred = tree_model.predict(X_test)

# Avaliar a acurácia
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia do modelo de árvore de decisão: {accuracy}')

from sklearn.metrics import confusion_matrix, classification_report

# Matriz de confusão
conf_matrix = confusion_matrix(y_test, y_pred)
print("Matriz de Confusão:\n", conf_matrix)

# Relatório de Classificação
print(classification_report(y_test, y_pred))